## Задание 1.
Проект 1:
Суть проекта - перейти со старого выходящего из поддержки интерфейса на новый, то есть обеспечить техническую возможность работы сервиса. Это означает, что цель проекта заключается не повышении прибыль или получении других выгод, а в гладком обновлении компонента системы для поддержания её работы на прежнем уровне. Поэтому можно использовать уже существующие метрики качества проекта: средняя оценка клиентами сервиса, количество назначенных и успешно проведённых встреч на 1000 пользователей приложения и т.д. Если никакая из существующих метрик не ухудшилась - значит никаких сбоев не произошло, пользователи не обнаружили багов и ошибок, качество сервиса не упало, а значит переход произведён успешно. Также метриками, вероятно, могут быть тесты программного обеспечения, проверяющие совместимость нового метода с приложениями. Данный проект технический, происходит на бэке, поэтому пользователю скорее всего заметен не будет, а значит и метрики должны быть более техническими.

Проект 2:
Налоги выплачивает большинство самозанятых, поэтому данный проект целесообразен, аудитория, которой он может быть интересен довольно большая. Оценить успешность выполнения можно будет, подсчитав долю пользователей приложения, которые перешли по этой новой ссылке и начали оформление платежа (то есть открыли соответствующую форму). Также можно договориться с командой платёжной формы о том, чтобы она предоставила информацию о количестве успешно произведённых оплат налогов, произошедших после перехода с созданной страницы. Последнее число можно разделить на общее кол-во пользователей приложения и оценить долю пользователей, успешно оплативших налоги через новый раздел. Последняя метрика также зависит от качества работы команды формы платежей, но так как компонент является стандартным, хорошо протестирован, в том числе и огромным количеством пользователей, то её можно считать в большей мере зависящей именно от команды приложения для самозанятых.

Проект 3:
Проект с точки зрения бизнеса и метрик очень похож на 1: он технический, происходит на стороне бэка и не заметен пользователю, поэтому главное требование - отсутствие поломок, сохранение работы сервиса на прежнем уровне, безболезненный и незаметный переход на новый метод, тесты качества в данном случае - тесты программного обеспечения. Также нужно следить за динамикой уже существующих метрик, это позволит убедиться, что ничего не упало и не стало подвисать. Изменения касаются пользователя косвенно, это не фронт и не новый функционал, поэтому метрики должны быть связаны больше с технической стороной.

Проект 4:
Метрикой может служить доля переходов на данную вкладку от всего числа пользователей. Если пользователи оценили новый более наглядный подход к представлению трат, они будут пользоваться приложением чаще. Вероятно, стоит измерять время, поведённое в приложении, и в частности на новой странице. Общее время в разделе расходов может уменьшится, так как пользователь будет иметь более наглядную информацию о своих расходах, ему не придётся долго отфильтровывать реальные расходы от переводов. Вероятно, также стоит посмотреть на уровень трат пользователей, который может увеличится за счёт того, что следящий за тратами пользователь теперь осознаёт реальный объём своих расходов и может позволить себе потратить чуть больше за счёт вычтенной суммы переводов. 

## Задание 2.
В расчётах я ориентировался на то, что в месяце 30 дней, из них 30*2/7 = 9 дней выходных, то есть остаётся 21 день на работу.
Релизы я бы расположил в следующем порядке:
1) Проект 1 - бросить все силы на него: Суммарные трудозатраты составляют 4 + 4 = 8 ч.д. Время на работу: 8 / 3 = 2.7 дня, т.е. на 3ий рабочий день получаем завершённый проект (с этого третьего дня остаётся 1/3 дня времени)
2) Проект 3 - 1/3 оставшегося времени третьего рабочего дня трёх разработчиков отдаём целиком на реализацию данного проекта. Получим, что к концу третьего дня они выполнят 1 ч.д. работы, оставив от проекта 2 ч.д. работы. Так как завершить Проект раньше чем к вечеру следующих суток завершить не получится ( даже если всех троих бросить на работу над ним, завершат они его через 2/3 = 0.7 дня, то есть к концу дня ), поэтому можно на нём оставить 2 разработчиков, которые завершат его к концу 4 рабочего дня ( 2 ч.д. работы поделить на 2 человека = 1 день работы ), а третьего перекинуть на другой проект.
3) Проект 2 - Этого третьего перекинем сюда, за 1 день он выполнит 1 ч.д. работы, оставив к началу 5 рабочего дня от суммарных 11 единиц работы 10. Далее на пятый день работы двух, оставшихся на предыдущем проекте разработчиков перекидываем сюда. В это время (то есть в конце дня 4, начале дня 5) начинаются регрессы Кредита и Карт, покрывающие изменения, внесённые предыдущими проектами. Начинаем регрессы с Карт, так как в них было внесено больше всего изменений, они менялись в двух проектах, а также, что, очевидно из описания Проекта 1, критические изменения происходили именно в них, так как назначение встреч опирается именно на них, Кредит связан с изменениями, но, вероятнее всего, косвенно. Через 2, то есть к концу дня номер 6, дня кончится регресс на Карты, до конца месяца останется 21-6=15 рабочих дней. Ещё через 3 дня кончится регресс на Кредит, до конца месяца останется 15-3=12 рабочих дня. Запас времени на исправлении критических недочётов имеется. В случае возникновения проблем, перебрасываем всю команду на устранение. Возвращаемся к Проекту 2. В случае, если тесты ничего не выявят и всё пройдёт в штатном режиме, Проект 2 завершится через 10 / 3 = 3.3 дня разработки, то есть в течение (4 + 3.3 = 7.3) восьмого дня. В это время ещё будет идти регресс Кредитов, поэтому тестирование внесённых изменений начнётся в начале дня 10 и кончится в конце дня номер 11. До конца месяца останется 10 рабочих дней. Приложение для самозанятых важно (по моей оценке сложнее, а потому более приоритетно в плане технического обслуживания и тестирования, чем приложение События), поэтому запас времени на случай проблем довольно уместен. В случае падения 2 разработчика должны будут обеспечить решение проблемы (не 3, а 2, так как проблема в данном случае, в целом, некритична, так как есть отсутствовавшая в предыдущих двух случаях возможность откатиться к старой версии. План по внедрению новых фич выполнен не будет, но зато ничто уже существующее не пострадает. Только одного человека ставить на устранение проблем в случае провала регресса мне кажется менее приемлемым, чем двух, так как приоритет данного проекта выше, чем у следующего, что я поясню ниже, и так как трудозатраты на данный проект меньше, чем на следующий, вероятность и масштаб промаха здесь меньше, что означает, что мы с большей вероятностью успеем представить готовый продукт к концу месяца, и, оставим больше времени на беспрерывную разработку для следующего проекта).
4) Проект 4 - В день номер 8 начинается работа, от этого дня остаётся ещё две трети. Вся команда свободна, поэтому кидаем её целиком на реализацию последнего продукта. К концу 8 дня будет сделано 2 ч.д. работы. От суммы останется 12. Через 12 / 3 = 4 дня работы, то есть через 12 полных рабочих дней с начала месяца все 4 проекта в случае успешных регрессов будут завершены. В конце дня 15 закончатся регрессионные тесты. До завершения месяца останется 21-15=6 запасных дней для устранения всех проблем.

**Обоснование:
Проект 1 критически важный, так как речь идёт о перебоях в работе целого приложения, ключевого для Банка сервиса. Его нужно выполнить первым, тем более, что трудозатраты на него минимальны среди имеющихся проектов (исключая, разве что, проект 3, критичность и важность которого очень низка), что даже по формуле RICE (хоть его и не стоит отсортировывать по ней, как проект, касающийся технической стороны и не приносящий очевидных бонусов компании и клиентам) делает его наиболее приоритетным.

На второе место по срокам я поставил Проект 3. Его важность и ценность очень мала по сравнению с оставшимися: он полезен и облегчит поддержку, но его влияние на продукт, на ценность. Однако, он входит в категорию проектов по устранению техдолга (на лекции было сказано, что такие проекты проще и дешевле выполнять как можно раньше) и, что самое главное, затрагивает АПИ приложения Карт, в которое ранее были внесены критически важные изменения, да и к тому же трудозатраты на выполнение проекта минимальны, что повышает его приоритетность. Конечно, риски представляются довольно маловероятными, так как в условии указано, что метод нигде не используется, но тем не менее их влияние в случае реализации может быть фатальным для приложения. Вынесение этого проекта, пусть и не самого значительного, как можно ближе к началу месяца позволит создать запас времени, страхующего команду в случае реализации рисков и появления сбоев в работе и ошибок в программе. Если вынести данный проект ближе к концу месяца, то в случае несовместимости изменений с программой, починить приложение может не хватить времени, а откатывать назад к старой версии не будет возможности, так как старая версия просто перестанет поддерживаться. Дополнительно, такое расположение снизит нагрузку на тестировщиков: они смогут провести регресс Карт после завершения Проекта 3 сразу для двух проектов (Проекта 1 тоже затрагивал Карты).

Проекты выше касались технической стороны, причём один был критически важным, решал вопрос нормального функционирования приложения, а другой был связан с первым и касался техдолга, а потому они оба не попадали под категорию проектов приоритезируемых по RICE (о чём было упомянуто на лекции), а выносятся в отдельную группу сверхприоритетных проектов. Остальные же проекты отсортирую согласно методике RICE. Они не являются такими критическими, поэтому я вынес их приоритезацию в отдельный блок, как явно уступающим в важности проекту 1. В оценках я не могу дать точные значения чисел охвата, но могу приблизительно их сравнивать. 
R: в проекте 2 вероятно несколько меньше, чем в проекте 4, так как количество людей, контролирующих свои расходы в приложении, скорее всего превосходит количество самозанятых, так как потенциально (но не обязательно) включает в себя и всех самозанятых, и несамозанятых. 4 проект кажется более универсальным и обширным по обхвату, чем 2, а также более прост в использовании.
I: я оторван от точного контекста, мне не известны все детали компании, её цели, её положение в текущий момент, её фокус, но я могу предположить, что вектор Проекта 2 более коррелирует с направлением развития компании в целом. Проект 4 упрощает жизнь пользователям, но, в целом, анализировать расходы можно и без новой фичи, это будет не так удобно, но это некритично, пользователи делали аналитику и до её появления. Проект 2 же расширяет экосистему, увеличивает область обслуживаемых потребностей пользователя, заметно упрощает оплату, уменьшая количество форм, в которых пользователь должен авторизоваться, тем самым экономя его время. Я бы расставил значения данного параметра следующим образом: I(2) = 0.3, I(4) = 0.2.
C: для обоих проектов я не располагаю надёжными источниками, все числа моя оценка, поэтому здесь я бы выставил для обоих проектов одинаковое значение 0.1, т.е. этот параметр не повлияет на сравнение (так как у обоих проектов одинаков).
E: 11 для проекта 2 и 14 для проекта 4.
В целом видно, что один множитель в числителе формулы RICE больше у проекта 4, другой - у проекта 2, а третий одинаков, при этом знаменатель больше у 4 проекта. По этой очень грубой оценке получил, что 2 проект приоритетнее. Полагаю, что их можно поменять местами, это некритично, так как продукты примерно одинакового плана: они оба добавляют небольшие, но приятные фичи, упрощающие жизнь пользователю.
